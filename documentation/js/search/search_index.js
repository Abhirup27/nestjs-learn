var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.196,1,1.973]],["body/controllers/AppController.html",[0,1.964,1,3.239,2,1.604,3,0.531,4,0.531,5,0.465,6,3.467,7,0.65,8,0.036,9,1.114,10,2.822,11,3.467,12,0.531,13,0.023,14,4.18,15,1.934,16,3.467,17,1.604,18,1.934,19,4.18,20,0.029,21,0.029]],["title/modules/AppModule.html",[22,1.196,23,1.973]],["body/modules/AppModule.html",[1,3.154,2,1.704,3,0.425,4,0.425,5,0.372,7,0.721,8,0.035,9,0.892,10,2.897,11,2.776,12,0.425,13,0.018,20,0.025,21,0.025,22,1.912,23,3.862,24,1.549,25,1.549,26,1.895,27,1.895,28,1.549,29,2.821,30,1.895,31,2.776,32,2.776,33,2.776,34,2.897,35,3.213,36,2.626,37,2.514,38,1.895,39,1.708,40,3.347,41,3.184,42,3.347,43,3.347,44,3.347,45,3.347]],["title/injectables/AppService.html",[10,1.59,46,1.196]],["body/injectables/AppService.html",[3,0.536,4,0.536,5,0.469,7,0.536,8,0.035,9,1.123,10,2.625,12,0.536,13,0.023,16,4.791,17,1.973,18,1.95,20,0.029,21,0.029,46,1.973,47,2.386,48,3.496,49,0.758,50,2.911,51,1.123,52,4.214,53,2.151,54,4.214,55,4.214]],["title/controllers/AuthController.html",[0,1.196,56,1.973]],["body/controllers/AuthController.html",[0,1.5,2,1.5,3,0.497,4,0.497,5,0.435,7,0.624,8,0.035,9,1.042,12,0.497,13,0.021,15,1.809,20,0.028,21,0.028,49,0.703,50,2.779,51,1.042,53,1.995,56,3.107,57,3.242,58,2.803,59,2.803,60,2.738,61,5.626,62,1.5,63,2.059,64,3.909,65,3.242,66,2.482,67,3.242,68,3.909,69,1.995,70,1.995]],["title/modules/AuthModule.html",[22,1.196,34,1.59]],["body/modules/AuthModule.html",[2,1.789,3,0.458,4,0.458,5,0.401,7,0.694,8,0.035,9,0.961,12,0.458,13,0.02,20,0.026,21,0.026,22,1.983,24,1.669,25,1.669,26,2.042,27,2.042,28,1.669,29,2.925,30,2.64,34,3.009,36,2.157,37,2.64,38,2.042,39,1.841,41,2.586,56,3.271,66,2.836,67,2.991,71,2.991,72,2.991,73,2.991,74,3.606,75,2.952,76,2.991,77,3.606,78,3.606]],["title/injectables/AuthService.html",[46,1.196,66,1.442]],["body/injectables/AuthService.html",[3,0.272,4,0.272,5,0.238,7,0.551,8,0.036,9,0.571,12,0.272,13,0.025,15,0.991,17,1.241,18,1.802,20,0.018,21,0.018,46,1.665,47,1.213,49,0.385,51,1.156,53,1.988,59,2.319,60,2.734,66,1.496,69,1.651,70,1.094,75,2.466,79,1.777,80,0.626,81,2.061,82,3.233,83,3.233,84,1.133,85,3.895,86,3.231,87,3.895,88,2.142,89,2.14,90,2.142,91,2.682,92,2.682,93,2.206,94,1.988,95,0.472,96,0.822,97,3.895,98,3.231,99,1.988,100,2.142,101,2.266,102,3.233,103,3.233,104,4.338,105,3.233,106,3.111,107,2.142,108,4.338,109,3.111,110,3.233,111,1.651,112,1.496,113,3.233,114,3.233,115,3.233,116,3.233,117,4.338,118,2.142,119,3.233,120,2.793,121,3.231,122,1.831,123,1.777,124,3.895,125,4.657,126,1.365,127,1.777,128,2.949,129,1.777,130,2.142,131,3.34,132,2.142,133,2.142,134,0.902,135,2.142,136,2.142,137,1.357,138,2.142,139,2.142,140,2.142,141,2.142,142,2.142,143,2.142,144,2.142,145,2.142,146,1.536]],["title/classes/CreatePostDto.html",[13,0.017,147,1.764]],["body/classes/CreatePostDto.html",[3,0.129,4,0.129,5,0.113,7,0.437,8,0.035,12,0.129,13,0.013,17,2.114,20,0.01,21,0.01,49,0.182,51,1.205,62,1.632,63,2.217,80,1.383,81,1.168,84,0.815,95,1.182,96,1.735,99,2.171,109,1.99,111,0.897,112,0.813,126,0.616,137,1.757,146,2.466,147,0.995,148,0.389,149,3.151,150,0.727,151,1.26,152,2.647,153,2.326,154,2.251,155,1.757,156,1.757,157,1.458,158,1.458,159,1.458,160,2.647,161,1.458,162,1.26,163,2.852,164,2.326,165,2.326,166,3.393,167,2.326,168,2.326,169,3.138,170,1.668,171,3.691,172,3.239,173,2.603,174,3.106,175,1.014,176,1.014,177,4.252,178,1.757,179,1.757,180,3.438,181,3.239,182,1.014,183,1.014,184,3.438,185,1.757,186,1.757,187,2.177,188,1.014,189,3.644,190,2.302,191,1.458,192,1.757,193,1.014,194,1.014,195,1.014,196,1.014,197,1.757,198,1.99,199,1.757,200,1.458,201,0.995,202,1.113,203,2.852,204,1.458,205,1.757,206,2.302,207,3.438,208,1.757,209,1.014,210,1.014,211,3.239,212,4.091,213,1.929,214,2.775,215,2.775,216,1.757,217,1.757,218,1.757,219,1.014,220,1.014,221,1.014,222,1.757,223,1.757,224,2.326,225,1.757,226,1.458,227,1.757,228,1.757,229,1.757,230,1.757,231,1.757,232,2.775,233,1.757,234,1.014,235,0.841,236,1.014,237,1.014,238,1.757,239,1.757,240,1.757,241,1.757,242,1.458,243,1.458,244,2.302,245,2.302,246,1.757,247,1.014,248,2.775,249,2.775,250,1.458,251,1.757,252,1.757,253,2.775,254,1.757,255,1.757,256,1.757,257,1.014,258,2.852,259,1.458,260,1.458,261,1.458,262,1.014,263,1.014,264,1.458,265,1.458,266,1.014,267,1.014,268,3.138,269,1.014,270,1.014,271,1.458,272,1.757,273,1.757,274,1.458,275,1.757,276,1.757,277,1.458,278,1.458,279,1.458,280,1.014,281,1.014,282,2.775,283,1.014,284,1.014,285,2.337,286,1.757,287,1.757,288,2.337,289,2.251,290,0.841,291,0.841,292,1.458,293,1.757,294,1.757,295,1.757,296,1.757,297,0.469,298,0.574,299,1.014,300,1.014,301,0.574,302,1.014,303,2.603,304,3.061,305,0.518,306,1.014,307,1.014,308,0.841,309,1.014,310,1.014,311,1.014,312,1.014,313,1.014,314,1.014,315,1.014,316,1.014,317,1.014,318,1.014,319,1.014,320,1.014,321,1.014,322,0.841,323,1.014,324,1.014,325,1.014,326,0.841,327,1.014]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.017,187,1.973]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.423,4,0.423,5,0.37,7,0.423,8,0.035,12,0.423,13,0.027,17,1.697,20,0.025,21,0.025,49,0.598,51,1.178,62,1.697,63,2.218,80,0.972,84,1.549,95,1.094,99,2.951,109,3.17,148,1.276,149,3.561,160,3.95,162,3.17,187,3.351,197,2.799,198,3.561,200,3.666,201,2.503,202,2.799,203,3.666,204,3.666,271,3.666,285,3.351,289,3.17,297,1.539,328,2.758,329,4.42,330,4.42,331,4.42,332,3.666,333,3.325,334,3.325,335,3.325]],["title/classes/CreateTokenDto.html",[13,0.017,336,2.234]],["body/classes/CreateTokenDto.html",[3,0.576,4,0.576,5,0.504,7,0.576,8,0.034,12,0.576,13,0.029,20,0.03,21,0.03,95,0.999,148,1.739,298,2.566,336,3.851,337,3.759,338,3.759]],["title/classes/CreateUserDto.html",[13,0.017,339,1.764]],["body/classes/CreateUserDto.html",[3,0.276,4,0.276,5,0.242,7,0.276,8,0.035,12,0.276,13,0.018,17,2.245,20,0.018,21,0.018,49,0.391,51,1.165,62,1.678,63,1.678,80,0.635,81,1.376,84,1.146,94,1.669,95,0.963,96,1.255,111,2.231,112,1.513,120,3.361,121,3.626,126,1.725,134,1.376,137,2.071,148,0.835,151,2.345,152,2.345,155,2.071,158,2.712,197,3.118,201,1.852,235,2.712,250,2.712,274,2.712,277,3.626,279,2.712,285,2.768,288,2.071,289,3.135,290,1.803,291,1.803,292,3.887,297,1.006,322,2.712,339,1.852,340,3.887,341,1.559,342,3.27,343,3.27,344,3.27,345,3.27,346,3.887,347,3.93,348,3.93,349,2.174,350,2.174,351,4.371,352,2.174,353,2.174,354,3.27,355,4.371,356,2.712,357,4.924,358,3.27,359,4.924,360,3.27,361,3.27,362,2.174,363,2.174,364,3.27,365,2.174,366,4.371,367,3.27,368,3.27,369,3.27,370,3.626,371,4.371,372,3.27,373,3.27,374,2.174,375,3.626,376,3.27,377,3.27,378,3.27,379,3.27,380,2.712,381,3.27,382,3.27,383,3.27,384,2.174,385,2.174]],["title/classes/GetPostsParamsDto.html",[13,0.017,386,1.764]],["body/classes/GetPostsParamsDto.html",[3,0.505,4,0.505,5,0.441,7,0.63,8,0.035,12,0.505,13,0.029,20,0.028,21,0.028,49,0.714,51,1.058,62,1.524,84,1.736,95,1.191,96,1.902,106,3.874,134,2.274,148,1.524,288,3.138,297,1.837,298,2.248,386,2.806,387,4.11,388,3.138,389,2.847,390,3.969,391,3.969,392,3.553]],["title/classes/GetUsersParamDto.html",[13,0.017,393,1.764]],["body/classes/GetUsersParamDto.html",[3,0.382,4,0.382,5,0.334,7,0.599,8,0.035,12,0.382,13,0.026,17,1.584,20,0.023,21,0.023,49,0.54,51,0.8,62,1.153,80,1.206,81,2.136,84,1.446,95,1.173,96,1.584,99,2.106,111,2.591,112,1.909,122,3.295,126,2.063,134,2.239,137,2.613,148,1.153,151,2.959,152,2.959,154,3.38,173,2.491,174,2.613,197,2.613,244,3.422,265,3.422,288,2.613,297,1.39,298,1.701,304,3.422,305,1.533,375,3.422,389,2.154,392,2.959,393,2.337,394,3.422,395,2.613,396,4.126,397,4.126,398,5.075,399,3.003,400,3.003,401,4.126,402,4.126,403,4.126,404,2.491]],["title/classes/PatchPostDto.html",[13,0.017,405,1.973]],["body/classes/PatchPostDto.html",[3,0.47,4,0.47,5,0.411,7,0.701,8,0.035,12,0.47,13,0.026,20,0.027,21,0.027,49,0.665,51,0.985,62,1.419,63,1.818,80,1.08,84,1.66,95,0.815,122,3.227,134,1.994,147,2.094,148,1.419,150,2.651,243,3.067,285,3,297,1.711,301,2.094,303,3.929,305,2.418,332,3.929,392,3.397,405,3,406,3.929,407,3.929,408,4.737,409,3.697,410,3.697,411,3.067,412,3.067,413,3.067]],["title/classes/PatchUserDto.html",[13,0.017,414,1.973]],["body/classes/PatchUserDto.html",[3,0.523,4,0.523,5,0.457,7,0.644,8,0.035,12,0.523,13,0.022,20,0.028,21,0.028,80,1.202,112,2.344,148,1.579,162,3.632,301,2.329,339,2.329,341,2.949,356,4.201,407,4.201,411,3.411,414,3.207,415,3.411,416,3.632,417,5.065,418,5.065,419,3.411,420,3.411,421,3.411]],["title/modules/PostModule.html",[22,1.196,35,1.764]],["body/modules/PostModule.html",[2,1.797,3,0.462,4,0.462,5,0.404,7,0.696,8,0.035,9,0.968,12,0.462,13,0.02,20,0.026,21,0.026,22,1.989,24,1.68,25,1.68,26,2.056,27,2.056,28,1.68,29,2.935,30,2.056,35,3.387,36,2.685,37,2.652,38,2.056,39,1.854,41,3.358,76,3.012,422,3.012,423,3.631,424,3.012,425,2.962,426,3.631,427,3.282,428,3.631,429,3.012]],["title/controllers/PostsController.html",[0,1.196,427,1.973]],["body/controllers/PostsController.html",[0,1.446,2,0.778,3,0.258,4,0.258,5,0.225,7,0.609,8,0.036,9,0.54,12,0.258,13,0.02,15,0.938,18,0.938,20,0.017,21,0.017,49,0.365,50,1.756,51,1.004,53,2.447,58,1.454,60,2.793,62,1.446,63,1.974,65,2.572,69,1.035,70,1.035,80,1.328,81,1.776,93,2.133,94,1.923,95,0.83,96,1.446,101,1.952,111,1.583,112,1.435,126,1.087,128,2.878,147,2.824,155,1.284,170,2.224,181,3.499,301,1.756,305,1.035,386,2.389,388,3.407,405,2.671,412,2.572,413,2.572,416,2.224,425,2.153,427,1.964,429,1.682,430,1.682,431,2.572,432,3.101,433,3.101,434,3.101,435,3.101,436,2.028,437,3.101,438,3.101,439,3.025,440,3.101,441,4.218,442,3.101,443,2.028,444,2.028,445,3.101,446,2.028,447,3.101,448,2.028,449,3.766,450,2.028,451,2.572,452,3.499,453,3.499,454,2.028,455,2.028,456,2.572,457,3.766,458,1.682,459,1.682,460,1.682,461,1.682,462,1.682,463,1.682,464,1.682,465,2.028,466,1.682,467,1.682,468,1.284,469,1.284,470,3.124,471,3.124,472,1.682,473,1.682,474,2.028,475,2.028,476,2.028,477,2.028,478,2.028,479,2.028,480,2.572,481,2.572,482,2.028,483,2.028,484,2.028]],["title/injectables/PostsService.html",[46,1.196,425,1.59]],["body/injectables/PostsService.html",[3,0.419,4,0.419,5,0.366,7,0.628,8,0.036,9,0.878,12,0.419,13,0.018,15,1.524,18,1.524,20,0.025,21,0.025,46,1.686,47,1.865,49,0.592,51,1.171,60,2.523,69,2.242,70,1.681,84,1.539,89,2.378,93,1.865,94,1.681,95,0.968,96,1.264,98,2.731,99,1.681,106,2.361,126,1.979,127,2.731,131,2.361,134,1.386,163,3.643,172,3.643,189,2.731,386,1.865,388,2.085,425,2.242,468,2.085,469,2.085,485,2.731,486,3.544,487,3.293,488,3.293,489,3.293,490,3.293,491,3.293,492,3.293,493,3.293,494,4.391,495,4.391]],["title/modules/UserModule.html",[22,1.196,36,1.442]],["body/modules/UserModule.html",[2,1.789,3,0.458,4,0.458,5,0.401,7,0.694,8,0.035,9,0.961,12,0.458,13,0.02,20,0.026,21,0.026,22,1.983,24,1.669,25,1.669,26,2.042,27,2.042,28,1.669,29,2.925,30,2.925,34,2.38,36,2.727,37,2.64,38,2.042,39,1.841,75,2.283,89,2.595,496,2.991,497,2.991,498,2.991,499,3.606,500,3.271,501,3.606,502,2.991,503,3.606,504,3.606]],["title/controllers/UsersController.html",[0,1.196,500,1.973]],["body/controllers/UsersController.html",[0,1.217,2,0.597,3,0.198,4,0.198,5,0.173,7,0.544,8,0.035,9,0.415,12,0.198,13,0.017,15,0.72,17,0.966,18,1.852,20,0.014,21,0.014,49,0.28,50,1.426,51,0.845,53,2.396,58,1.116,60,2.475,62,1.217,63,1.399,69,0.794,70,0.794,80,1.317,81,1.534,89,1.534,93,1.796,94,2.043,95,1.034,96,1.217,101,1.686,111,1.285,112,1.165,122,1.426,126,1.745,128,3.07,134,2.308,146,1.806,154,1.116,155,0.986,157,2.089,159,2.089,161,1.291,170,1.116,174,2.307,190,3.022,191,3.022,201,2.063,202,1.595,242,2.089,301,0.881,305,0.794,326,2.089,339,2.658,393,2.063,395,3.225,414,3.07,416,2.274,421,2.089,431,2.089,439,2.274,452,2.089,453,2.089,456,2.089,458,1.291,459,1.291,460,3.022,461,1.291,462,3.552,463,3.552,464,2.63,466,2.63,467,1.291,468,0.986,469,0.986,470,2.089,471,2.089,472,1.291,473,1.291,480,1.291,481,2.089,500,1.595,502,1.291,505,1.291,506,2.518,507,3.171,508,2.518,509,2.518,510,1.556,511,1.556,512,2.518,513,1.556,514,4.021,515,3.652,516,1.556,517,2.518,518,2.518,519,3.644,520,1.556,521,2.518,522,2.089,523,1.556,524,2.518,525,2.518,526,2.518,527,1.556,528,2.518,529,2.518,530,2.518,531,1.556,532,1.806,533,3.644,534,2.518,535,2.518,536,2.089,537,2.63,538,1.556,539,1.556,540,1.556,541,3.171,542,1.556,543,1.556,544,1.556,545,1.556,546,1.556,547,1.291,548,1.556,549,1.556,550,1.556,551,1.556,552,1.556,553,1.556,554,1.556,555,1.556,556,1.556,557,1.556,558,1.556,559,1.556,560,1.556,561,1.556,562,1.556,563,1.556,564,1.556,565,1.556,566,1.556,567,1.556,568,1.556,569,1.556,570,1.556,571,1.556,572,1.556]],["title/injectables/UsersService.html",[46,1.196,89,1.311]],["body/injectables/UsersService.html",[3,0.274,4,0.274,5,0.24,7,0.497,8,0.036,9,0.575,12,0.413,13,0.024,15,0.998,17,1.247,18,1.503,20,0.018,21,0.018,46,1.247,47,1.221,49,0.388,50,1.84,51,1.042,53,2.676,59,1.546,60,2.506,66,2.426,69,2.384,70,1.101,75,1.365,80,0.63,81,0.908,86,1.788,89,1.368,91,2.695,92,2.695,93,2.214,94,1.996,95,1.156,96,1.501,101,2.161,120,3.121,122,2.465,123,1.788,126,1.837,128,2.957,129,1.788,131,1.546,134,2.368,346,3.61,380,2.695,393,2.465,395,3.226,404,1.788,468,1.365,469,1.365,486,3.121,514,3.61,515,3.121,532,2.33,537,3.243,573,1.546,574,3.249,575,3.249,576,3.249,577,3.249,578,3.249,579,3.249,580,3.243,581,2.156,582,2.156,583,3.249,584,3.249,585,3.249,586,3.249,587,2.156,588,2.156,589,4.352,590,3.249,591,2.156,592,3.249,593,3.249,594,2.156,595,1.788,596,2.156,597,2.156,598,2.156,599,2.156,600,3.249,601,3.249]],["title/coverage.html",[602,3.034]],["body/coverage.html",[0,1.955,1,1.919,5,0.337,6,2.513,8,0.035,10,1.547,13,0.031,20,0.023,21,0.023,28,1.402,46,1.955,48,2.513,56,1.919,57,2.513,63,1.163,66,1.402,79,2.513,89,1.275,95,0.915,101,1.402,126,1.062,147,1.716,149,2.977,150,2.977,187,1.919,198,2.173,245,2.513,328,2.513,336,2.173,337,2.513,338,2.513,339,1.716,340,2.513,341,2.977,386,1.716,387,2.513,388,1.919,389,2.977,393,1.716,394,2.513,395,1.919,405,1.919,406,2.513,414,1.919,415,2.513,425,1.547,427,1.919,430,2.513,439,2.173,485,2.513,500,1.919,505,2.513,536,4.681,573,2.977,602,2.173,603,2.513,604,3.03,605,4.151,606,5.094,607,5.897,608,4.151,609,2.513,610,4.735,611,3.03,612,3.03,613,3.03,614,4.735,615,3.03,616,3.03,617,3.03,618,3.03,619,3.03]],["title/dependencies.html",[25,1.731,620,2.166]],["body/dependencies.html",[8,0.035,9,1.119,13,0.028,20,0.029,21,0.029,25,1.942,297,1.942,298,2.377,305,2.143,419,3.481,420,3.481,621,4.197,622,4.197,623,5.538,624,4.197,625,4.197,626,4.197,627,4.197,628,4.197,629,4.197,630,4.197,631,4.197,632,4.197,633,4.197,634,4.197,635,4.197]],["title/miscellaneous/enumerations.html",[636,1.333,637,3.103]],["body/miscellaneous/enumerations.html",[8,0.035,20,0.028,21,0.028,49,0.709,63,2.165,95,0.868,99,3.103,166,4.09,201,2.23,211,4.09,213,4.09,258,4.09,259,4.09,260,4.09,261,4.09,264,3.267,308,4.09,515,3.536,636,2.011,637,3.267,638,3.939,639,3.939,640,3.939,641,3.939,642,3.939,643,3.939,644,4.931]],["title/miscellaneous/functions.html",[636,1.333,645,3.103]],["body/miscellaneous/functions.html",[8,0.03,20,0.03,21,0.03,28,2.751,49,0.826,101,2.125,532,3.293,609,3.809,636,2.344,645,3.809,646,4.592,647,4.592,648,3.809,649,4.592,650,4.592]],["title/index.html",[49,0.47,651,2.612,652,2.612]],["body/index.html",[8,0.034,20,0.021,21,0.021,39,2.656,80,0.741,160,1.818,174,2.981,202,1.605,206,2.102,226,4.316,451,2.102,522,2.102,547,4.316,595,2.102,602,1.818,603,3.037,648,4.642,653,2.535,654,4.298,655,2.535,656,5.492,657,2.535,658,5.364,659,2.535,660,2.535,661,2.535,662,3.661,663,2.535,664,3.661,665,2.535,666,4.298,667,2.535,668,3.661,669,2.535,670,2.535,671,2.535,672,2.535,673,2.535,674,4.707,675,3.661,676,2.535,677,2.535,678,2.535,679,2.535,680,3.661,681,4.298,682,3.661,683,2.535,684,3.661,685,5.203,686,4.707,687,2.535,688,2.535,689,3.661,690,2.535,691,2.535,692,2.535,693,2.535,694,4.707,695,2.535,696,2.535,697,2.535,698,2.535,699,3.661,700,2.535,701,2.535,702,2.535,703,2.535,704,2.535,705,2.535,706,3.661,707,2.535,708,2.535,709,2.535,710,3.661,711,2.535,712,2.535,713,2.535,714,3.037,715,2.535,716,2.535,717,2.535,718,2.535,719,2.535,720,2.535,721,2.535,722,2.535,723,2.535,724,3.661,725,2.535,726,2.535,727,2.535,728,2.535,729,4.298,730,2.535,731,2.535,732,2.535,733,2.535,734,2.535,735,2.535,736,2.535,737,2.535,738,2.535,739,2.535,740,3.661,741,2.535,742,2.535,743,2.535]],["title/modules.html",[24,1.958]],["body/modules.html",[8,0.03,20,0.03,21,0.03,23,2.832,24,2.069,34,2.283,35,2.532,36,2.069,714,4.888,744,5.893,745,5.893,746,5.893]],["title/overview.html",[747,3.509]],["body/overview.html",[2,1.315,8,0.034,10,2.572,20,0.025,21,0.025,22,1.315,23,3.821,24,1.585,25,1.585,26,1.939,27,1.939,28,1.585,29,1.939,30,1.939,31,2.841,32,2.841,33,2.841,34,2.916,35,3.297,36,2.694,37,2.552,38,1.939,39,1.748,47,1.939,66,2.694,71,2.841,72,2.841,73,2.841,89,2.451,148,1.315,278,4.179,370,2.841,422,2.841,424,2.841,425,2.572,496,2.841,497,2.841,498,2.841,747,2.841]],["title/properties.html",[84,1.311,620,2.166]],["body/properties.html",[8,0.035,20,0.031,21,0.031,80,1.367,84,1.639,748,4.676,749,4.676,750,4.676,751,4.676,752,4.676]],["title/miscellaneous/typealiases.html",[636,1.333,753,3.741]],["body/miscellaneous/typealiases.html",[8,0.03,20,0.03,21,0.03,49,0.823,81,1.925,95,1.266,101,2.116,126,2.013,486,3.279,573,3.279,580,3.792,636,2.334,754,4.572,755,4.572,756,4.572]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":749,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.26",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["11/11",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["123",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["123'})@isstring()@isnotempty()@matches(/^[a",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1234",{"_index":404,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":399,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["12356",{"_index":495,"title":{},"body":{"injectables/PostsService.html":{}}}],["16t07:46:32+0000",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601({strict",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.6",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["29th",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["33",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4/4",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.1.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["96",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["accepts",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["active",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["actual",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["added",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["adventure",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alias",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":754,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":700,"title":{},"body":{"index.html":{}}}],["anything",{"_index":650,"title":{},"body":{"miscellaneous/functions.html":{}}}],["api",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":470,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":471,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":472,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":475,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application.'})@apiresponse({status",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":688,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":23,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arguement",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["array",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["atleast",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":56,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule/authservice",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["author",{"_index":752,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":66,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":689,"title":{},"body":{"index.html":{}}}],["based",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["bearer",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["blog",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":743,"title":{},"body":{"index.html":{}}}],["body",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":746,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":744,"title":{},"body":{"modules.html":{}}}],["building",{"_index":702,"title":{},"body":{"index.html":{}}}],["called",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["case",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["cases",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["cdn",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["channel",{"_index":717,"title":{},"body":{"index.html":{}}}],["character",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["circular",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":699,"title":{},"body":{"index.html":{}}}],["client",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["cloud",{"_index":683,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":422,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":423,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":424,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":496,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":498,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":497,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["come",{"_index":707,"title":{},"body":{"index.html":{}}}],["coming",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{}}}],["compliant",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["compodoc/compodoc",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.dir(typeof",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"user",{"_index":491,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(createpostdto",{"_index":483,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(headers",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(ip",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(request",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(typeof",{"_index":477,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(userid",{"_index":493,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(userservice",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersservice",{"_index":487,"title":{},"body":{"injectables/PostsService.html":{}}}],["contain",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content.'})@isstring()@isoptional",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["contents",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":474,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["converted",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["courses",{"_index":723,"title":{},"body":{"index.html":{}}}],["cover",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["coverage",{"_index":602,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverimageurl",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":482,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":147,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":187,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtokendto",{"_index":336,"title":{"classes/CreateTokenDto.html":{}},"body":{"classes/CreateTokenDto.html":{},"coverage.html":{}}}],["createuser",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":339,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["crucial",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto.createhash('sha1",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":641,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["currently",{"_index":417,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["data",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["database",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["db",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["declarations",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["decorators",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":719,"title":{},"body":{"index.html":{}}}],["default",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["defaultvaluepipe",{"_index":465,"title":{},"body":{"controllers/PostsController.html":{}}}],["defaultvaluepipe(1",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":458,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["denied",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["deploy",{"_index":674,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":687,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":680,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":698,"title":{},"body":{"index.html":{}}}],["description",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":659,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":730,"title":{},"body":{"index.html":{}}}],["discord",{"_index":716,"title":{},"body":{"index.html":{}}}],["displayed",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["dive",{"_index":718,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":603,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchUserDto.html":{}}}],["dtos/create",{"_index":467,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":468,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":473,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e.g",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["e2e",{"_index":669,"title":{},"body":{"index.html":{}}}],["each",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["edge",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficiently",{"_index":679,"title":{},"body":{"index.html":{}}}],["element",{"_index":331,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["email",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{}}}],["endpoint",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":677,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":734,"title":{},"body":{"index.html":{}}}],["entries",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":637,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/status.enum",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":452,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["expects",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["experience",{"_index":721,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exports:[authservice",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["expression",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["extends",{"_index":407,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["external",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":692,"title":{},"body":{"index.html":{}}}],["featured",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":703,"title":{},"body":{"index.html":{}}}],["february",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":694,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":486,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["findall(getuserparamdto",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["findonebyid(id",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fname",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":701,"title":{},"body":{"index.html":{}}}],["follow",{"_index":737,"title":{},"body":{"index.html":{}}}],["forbidnonwhitelisted:true",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["form",{"_index":329,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["format",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format/structure/blueprint",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwarded",{"_index":396,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["forwardref",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":712,"title":{},"body":{"index.html":{}}}],["full",{"_index":733,"title":{},"body":{"index.html":{}}}],["function",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":645,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":697,"title":{},"body":{"index.html":{}}}],["generate",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["gentoken",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/:id",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param",{"_index":476,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(postsparams",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsparamsdto",{"_index":386,"title":{"classes/GetPostsParamsDto.html":{}},"body":{"classes/GetPostsParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["gets",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["getting",{"_index":651,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":393,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["global",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":726,"title":{},"body":{"index.html":{}}}],["handles",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["hands",{"_index":720,"title":{},"body":{"index.html":{}}}],["handy",{"_index":708,"title":{},"body":{"index.html":{}}}],["hash",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash.digest('hex",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash.update(data",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["hello",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":724,"title":{},"body":{"index.html":{}}}],["here",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["hold",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["holding",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["holds",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id:number",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["id?/:option",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifer",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["identifier",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["imports:[forwardref",{"_index":504,"title":{},"body":{"modules/UserModule.html":{}}}],["include",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["incoming",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["infrastructure",{"_index":705,"title":{},"body":{"index.html":{}}}],["initializes",{"_index":647,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":46,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injects",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["inside",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["install",{"_index":696,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":657,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":727,"title":{},"body":{"index.html":{}}}],["ip",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["isarray",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdate",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":392,"title":{},"body":{"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson()@isoptional",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotemptyobject",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["iso8601",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isobject",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isint()@type(undefined",{"_index":390,"title":{},"body":{"classes/GetPostsParamsDto.html":{}}}],["isstring",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":333,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["jane@doe.com",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":740,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":742,"title":{},"body":{"index.html":{}}}],["john",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["json",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["key",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["learn",{"_index":711,"title":{},"body":{"index.html":{}}}],["learning",{"_index":653,"title":{},"body":{"index.html":{}}}],["legend",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":750,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":739,"title":{},"body":{"index.html":{}}}],["list",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":756,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lname",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["login",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["logs",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["looking",{"_index":682,"title":{},"body":{"index.html":{}}}],["loop",{"_index":736,"title":{},"body":{"index.html":{}}}],["lower",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["main.ts",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":690,"title":{},"body":{"index.html":{}}}],["managing",{"_index":704,"title":{},"body":{"index.html":{}}}],["mandatory",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["many",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["matches",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["mau",{"_index":685,"title":{},"body":{"index.html":{}}}],["max",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(250",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mentioned",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":330,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptions",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":636,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mode",{"_index":662,"title":{},"body":{"index.html":{}}}],["module",{"_index":22,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":681,"title":{},"body":{"index.html":{}}}],["name",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["named",{"_index":649,"title":{},"body":{"miscellaneous/functions.html":{}}}],["need",{"_index":731,"title":{},"body":{"index.html":{}}}],["needs",{"_index":332,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{}}}],["nestjs",{"_index":648,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":419,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["npm",{"_index":656,"title":{},"body":{"index.html":{}}}],["number",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["offer",{"_index":741,"title":{},"body":{"index.html":{}}}],["official",{"_index":686,"title":{},"body":{"index.html":{}}}],["offset",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["one",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["operation",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["operations",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":328,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:12",{"_index":334,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:15",{"_index":335,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":747,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["package",{"_index":620,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["page','story",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pairs",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["param",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":402,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["params.dto",{"_index":469,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":389,"title":{},"body":{"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["params.dto.ts:10",{"_index":391,"title":{},"body":{"classes/GetPostsParamsDto.html":{}}}],["params.dto.ts:19",{"_index":400,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parseintpipe",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parseintpipe,defaultvaluepipe",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":732,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":411,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":408,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":418,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["passwd",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":416,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":405,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":457,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":414,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["person\\\"\\r\\n",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["platform",{"_index":684,"title":{},"body":{"index.html":{}}}],["please",{"_index":715,"title":{},"body":{"index.html":{}}}],["possible",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.controller",{"_index":428,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":412,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:117",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:135",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":410,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:166",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:24",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:50",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:63",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:90",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postition",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["postmodule",{"_index":35,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["posts",{"_index":388,"title":{},"body":{"classes/GetPostsParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["posts/post.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":427,"title":{"controllers/PostsController.html":{}},"body":{"modules/PostModule.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postsparams",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsparams.userid",{"_index":478,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsservice",{"_index":425,"title":{"injectables/PostsService.html":{}},"body":{"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus[value",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype[value",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["present",{"_index":401,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["private",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":664,"title":{},"body":{"index.html":{}}}],["project",{"_index":654,"title":{},"body":{"index.html":{}}}],["properties",{"_index":84,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"properties.html":{}}}],["property",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/post.service",{"_index":429,"title":{},"body":{"modules/PostModule.html":{},"controllers/PostsController.html":{}}}],["providers/user.service",{"_index":502,"title":{},"body":{"modules/UserModule.html":{},"controllers/UsersController.html":{}}}],["public",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty()@transform",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["purposes",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["put",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["query",{"_index":460,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["query('limit',new",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page',new",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.'})@apiquery({name",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":713,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":673,"title":{},"body":{"index.html":{}}}],["real",{"_index":728,"title":{},"body":{"index.html":{}}}],["recieved",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["reflect",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["regarding",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["regexp",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["register",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["registered",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["relation",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["req",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":693,"title":{},"body":{"index.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resource",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["resources",{"_index":706,"title":{},"body":{"index.html":{}}}],["response",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["route",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":658,"title":{},"body":{"index.html":{}}}],["runs",{"_index":678,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["save",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scheduled",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sends",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty()@transform",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["service",{"_index":403,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["set",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["setup",{"_index":655,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":695,"title":{},"body":{"index.html":{}}}],["singleton",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"modules/PostModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":398,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["specified",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../main.ts",{"_index":646,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":639,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.service.ts",{"_index":755,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":503,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/create",{"_index":337,"title":{},"body":{"classes/CreateTokenDto.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:30",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:42",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:55",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":609,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":387,"title":{},"body":{"classes/GetPostsParamsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":406,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":642,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/status.enum.ts",{"_index":640,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.controller.ts",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/post.controller.ts:30",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/post.controller.ts:51",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/post.controller.ts:71",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/post.module.ts",{"_index":426,"title":{},"body":{"modules/PostModule.html":{}}}],["src/posts/providers/post.service.ts",{"_index":485,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/post.service.ts:14",{"_index":489,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/post.service.ts:7",{"_index":488,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/user/dtos/create",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/get",{"_index":394,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/user/dtos/patch",{"_index":415,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/user/providers/user.service",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/user/providers/user.service.ts",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/user/providers/user.service.ts:20",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/providers/user.service.ts:39",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/providers/user.service.ts:67",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/user.controller.ts",{"_index":505,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:58",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/user.controller.ts:75",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/user.controller.ts:95",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/user.module",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/user/user.module.ts",{"_index":499,"title":{},"body":{"modules/UserModule.html":{}}}],["start",{"_index":660,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":663,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":665,"title":{},"body":{"index.html":{}}}],["started",{"_index":652,"title":{"index.html":{}},"body":{}}],["state",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":735,"title":{},"body":{"index.html":{}}}],["steps",{"_index":675,"title":{},"body":{"index.html":{}}}],["store",{"_index":445,"title":{},"body":{"controllers/PostsController.html":{}}}],["stores/tells",{"_index":643,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["story",{"_index":644,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":691,"title":{},"body":{"index.html":{}}}],["strict",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["stringify",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["strings",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["successfully",{"_index":481,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully.'})@patch",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully.'})@post",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":480,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":714,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":745,"title":{},"body":{"modules.html":{}}}],["t",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["table",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":676,"title":{},"body":{"index.html":{}}}],["takes",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["tell",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["telling",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tells",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["test",{"_index":668,"title":{},"body":{"index.html":{}}}],["test1",{"_index":494,"title":{},"body":{"injectables/PostsService.html":{}}}],["test:covdeployment",{"_index":671,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":670,"title":{},"body":{"index.html":{}}}],["tests",{"_index":666,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetoken(user.id",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postsservice.findall(postsparams.userid",{"_index":479,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findonebyid(id",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":490,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":729,"title":{},"body":{"index.html":{}}}],["title",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["title'})@isstring()@isnotempty()@minlength(4)@maxlength(250",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["token",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.dto.ts",{"_index":338,"title":{},"body":{"classes/CreateTokenDto.html":{},"coverage.html":{}}}],["tokens",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["topic",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["transfer",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["transform",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["transformer",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTokenDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["transforms",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["travelling",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["true})@isarray()@minlength(3",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@isoptional",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@isoptional()@type(undefined",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@validatenested({each",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":753,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":492,"title":{},"body":{"injectables/PostsService.html":{}}}],["types",{"_index":420,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["undefined",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@isobject({each",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isstring({each",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["unit",{"_index":667,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":751,"title":{},"body":{"properties.html":{}}}],["update",{"_index":456,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":413,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":409,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":484,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["used",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["user.controller",{"_index":501,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":421,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.service",{"_index":397,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["user/user.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["userid",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetPostsParamsDto.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":36,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":395,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userscontroller",{"_index":500,"title":{"controllers/UsersController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userservice",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersservice",{"_index":89,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["uuid",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["uuid.substr(0,8",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["uuid.substr(12,4",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["uuid.substr(16,4",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["uuid.substr(20,12",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["uuid.substr(8,4",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validates",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validationpipe",{"_index":466,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["validationpipe({whitelist",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsParamsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["variable",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["version",{"_index":748,"title":{},"body":{"properties.html":{}}}],["video",{"_index":722,"title":{},"body":{"index.html":{}}}],["visit",{"_index":710,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":725,"title":{},"body":{"index.html":{}}}],["void",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["want",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":661,"title":{},"body":{"index.html":{}}}],["whitespaces",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["without",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":709,"title":{},"body":{"index.html":{}}}],["world",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":738,"title":{},"body":{"index.html":{}}}],["you're",{"_index":672,"title":{},"body":{"index.html":{}}}],["z0",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { PostModule } from './posts/post.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UserModule, PostModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                genToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        genToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    genToken()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post } from \"@nestjs/common\";\nimport { AuthService } from \"./providers/auth.service\";\n\n\n@Controller('auth')\nexport class AuthController\n{\n    constructor(\n        private readonly authService: AuthService,\n    )\n    {\n\n    }\n    @Post()\n    public genToken()\n    {\n\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from \"@nestjs/common\";\nimport { UserModule } from \"src/user/user.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./providers/auth.service\";\n\n@Module(\n    {\n        controllers: [AuthController],\n        providers: [AuthService],\n        imports: [forwardRef(()=> UserModule)],\n        exports:[AuthService]\n    }\n)\nexport class AuthModule{}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A class which is used for Authentication purposes. It is injectable.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                generateToken\n                            \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                             This class is in circular dependency with UsersService. forwardRef is used\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/providers/auth.service.ts:42\n                        \n                    \n\n            \n                \n                    Function used to generate active tokens or refresh tokens.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    userId\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/providers/auth.service.ts:55\n                        \n                    \n\n            \n                \n                    Function is called when a client sends a request at a route with crucial operation, and containing a Auth bearer token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/providers/auth.service.ts:30\n                        \n                    \n\n            \n                \n                    Function called when a client logs in.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    email\n                                            \n                                            \n                                                    password\n                                            \n                                            \n                                                    id\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from \"@nestjs/common\";\nimport crypto from \"crypto\";\nimport {UUID} from \"crypto\";\nimport { user, UsersService } from \"src/user/providers/user.service\";\n\n\n/**\n * A class which is used for Authentication purposes. It is injectable.\n */\n@Injectable()\nexport class AuthService\n{\n    /**\n     *  This class is in circular dependency with UsersService. forwardRef is used\n     * @param userService \n     */\n    constructor(\n        @Inject(forwardRef(()=> UsersService))\n        private readonly userService : UsersService\n\n    )\n    { }\n    /**\n     * Function called when a client logs in.\n     * @param email \n     * @param password \n     * @param id \n     * @returns \n     */\n    public login = (email: string, password: string, id:number): UUID =>\n    {\n        const user: user = this.userService.findOneById(id);\n        const token: UUID = this.generateToken(user.id); \n\n        return token;\n    }\n    /**\n     * Function used to generate active tokens or refresh tokens.\n     * @param userId \n     * @returns \n     */\n    public generateToken = (userId: number): UUID =>\n    {\n        const hash = crypto.createHash('sha1');\n        const data = `${userId}`;\n        hash.update(data);\n        const uuid = hash.digest('hex');\n        return `${uuid.substr(0,8)}-${uuid.substr(8,4)}-${uuid.substr(12,4)}-${uuid.substr(16,4)}-${uuid.substr(20,12)}`;\n\n    }\n    /**\n     * Function is called when a client sends a request at a route with crucial operation, and containing a Auth bearer token \n     * @returns \n     */\n    public isAuth = (): boolean =>\n    {\n        return true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                A Data Transfer Object which is used to validate and transform the body of the POST request recieved at the /post route. Requests are denied if they include any key and value which are not defined here in this DTO.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                coverImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post.', example: 'The post content.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:37\n                        \n                    \n\n            \n                \n                    A string holding the body/ contents of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        coverImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n            \n                \n                    A string which is a URL of a CDN/ image, which will be used as the cover image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@IsObject({each: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:166\n                        \n                    \n\n            \n                \n                    An array of type CreatePostMetaOptionsDto. It holds meta data about the post. These hold key value pairs which tells the client some information on the post, e.g. how the post has to be displayed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post', 'page','story', 'series''})@IsEnum(PostType)@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:50\n                        \n                    \n\n            \n                \n                    An enum holding the type of post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published. Must be in ISO8601 format. T', example: '2024-03-16T07:46:32+0000'})@IsISO8601({strict: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:117\n                        \n                    \n\n            \n                \n                    A Date Object which accepts ISO8601 compliant Date format. Strict is set because it will check edge cases like 29th of February.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object.', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:90\n                        \n                    \n\n            \n                \n                    A string which is a stringify json telling how the client/ user expects the format/structure/blueprint of the response to be in.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique identifier for the resource. For e.g. : 'my-url'', example: 'my-blog-post-123'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lower case letters and use only \"-\" and without whitespaces. for e.g. \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n            \n                \n                    A string holding the unique identifier of the post\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:63\n                        \n                    \n\n            \n                \n                    An enum holding the state of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: undefined})@IsString({each: true})@IsArray()@MinLength(3, {each: true})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:135\n                        \n                    \n\n            \n                \n                    An Array of strings which holds the tags, which tell what the topic of the post is. The string gets converted to an actual array.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title for the blog post. Minimum 4 letters long.', example: 'This is a title'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:24\n                        \n                    \n\n            \n                \n                    A string holding the Title of the post, required.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, isArray, IsDate, IsEnum, isNotEmpty, IsNotEmpty, IsNotEmptyObject, IsObject, IsOptional, IsString, MaxLength, MinLength, matches, Matches, IsJSON, IsUrl, IsISO8601, Validate, ValidateNested } from \"class-validator\";\nimport { Type, Transform } from \"class-transformer\";\nimport { PostType } from \"../enums/postType.enum\";\nimport { PostStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"./create-post-meta-options.dto\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\n/**\n * A Data Transfer Object which is used to validate and transform the body of the POST request recieved at the /post route. Requests are denied if they include any key and value which are not defined here in this DTO.\n */\nexport class CreatePostDto{\n\n    /**\n     * A string holding the Title of the post, required.\n     */\n    @ApiProperty({\n        description: \"This is the title for the blog post. Minimum 4 letters long.\",\n        example: \"This is a title\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(4)\n    @MaxLength(250)\n    title: string;\n    \n    /**\n     * A string holding the body/ contents of the post.\n     */\n    @ApiPropertyOptional(\n        {\n            description: \"This is the content of the post.\",\n            example: \"The post content.\"\n        }\n    )\n    @IsString()\n    @IsOptional()\n    content?: string;\n\n    /**\n     * An enum holding the type of post.\n     * @enum {PostType}\n     */\n    @ApiProperty({\n        enum: PostType,\n        description: \"Possible values: 'post', 'page','story', 'series'\"\n    })\n    @IsEnum(PostType)\n    @IsNotEmpty()\n    @Transform(({ value }) => PostType[value] || value)\n    postType: PostType;\n\n    /**\n     * An enum holding the state of the post.\n     * @enum { PostStatus }\n     */\n    @ApiProperty({\n        enum: PostStatus,\n        description: \"Possible values: 'draft', 'scheduled', 'review', 'published'\"\n    })\n    @IsEnum(PostStatus)\n    @IsNotEmpty()\n    @Transform(({ value }) => PostStatus[value] || value)\n    status: PostStatus;\n\n    /**\n     * A string holding the unique identifier of the post\n     */\n    @ApiProperty({\n        description: \"A unique identifier for the resource. For e.g. : 'my-url'\",\n        example: \"my-blog-post-123\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all lower case letters and use only \"-\" and without whitespaces. for e.g. \"my-url\"',\n    })\n    slug: string;\n\n    /**\n     * A string which is a stringify json telling how the client/ user expects the format/structure/blueprint of the response to be in. \n     */\n    @ApiPropertyOptional(\n        {\n            description: \"Serialize your JSON object.\",\n            example: \"{\\r\\n    \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n    \\\"@type\\\": \\\"Person\\\"\\r\\n  }\"\n        }\n    )\n    @IsJSON()\n    @IsOptional()\n    schema?: string;\n\n    /**\n     * A string which is a URL of a CDN/ image, which will be used as the cover image for the post.\n     */\n    @ApiPropertyOptional(\n        {\n            description: \"The featured image for your blog post\",\n            example: 'http://localhost.com/images/image1.jpg'\n        }\n    )\n    @IsUrl()\n    @IsOptional()\n    coverImageUrl?: string;\n\n    /**\n     * A Date Object which accepts ISO8601 compliant Date format. Strict is set because it will check edge cases like 29th of February.\n     */\n    @ApiPropertyOptional(\n        {\n            description: 'The date on which the blog post is published. Must be in ISO8601 format. T',\n            example: '2024-03-16T07:46:32+0000'\n        }\n    )\n    @IsISO8601({ strict: true })\n    //@Type(() => Date)\n    @IsOptional()\n    publishedOn?: Date;\n\n    /**\n     * An Array of strings which holds the tags, which tell what the topic of the post is. The string gets converted to an actual array. \n     */\n    @ApiPropertyOptional(\n        {\n            description: \"Array of tags passed as string values\",\n            example: [\"adventure\", \"travelling\"]\n        }\n    )\n    @IsString({ each: true })\n    @IsArray()\n    @MinLength(3, { each: true })\n    //@IsNotEmpty()\n    //@IsNotEmptyObject()\n    @IsOptional()\n    @Type(() => Array)\n    tags?: string[];\n    \n    /**\n     * An array of type CreatePostMetaOptionsDto. It holds meta data about the post. These hold key value pairs which tells the client some information on the post, e.g. how the post has to be displayed.\n     */\n    @ApiPropertyOptional(\n        {\n            type: 'array',\n            required: false,\n            items: {\n                type: 'object',\n                properties: {\n                    key: {\n                        type: 'string',\n                        description: \"The key can be any string identifer for your meta option\",\n                        example: 'sidebarEnabled'\n                    },\n                    value: {\n                        type: 'any',\n                        description: \"Any value that you want to save to the key\",\n                        example: true,\n                    }\n                }\n            }\n        }\n    )\n    @IsOptional()\n    @IsArray()\n    @IsObject({ each: true })\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                A DTO which holds key value pairs in the form of strings. If a MetaOption has a element, needs to have a value. tells the client some information on the post, e.g. how the post has to be displayed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n * @class {CreatePostMetaOptionsDto}\n * @type {CreatePostMetaOptionsDto}\n * A DTO which holds key value pairs in the form of strings. If a MetaOption has a element, needs to have a value. tells the client some information on the post, e.g. how the post has to be displayed.\n */\nexport class CreatePostMetaOptionsDto{\n\n    @IsString()\n    @IsNotEmpty()\n    key: string;\n    \n    @IsNotEmpty()\n    value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTokenDto.html":{"url":"classes/CreateTokenDto.html","title":"class - CreateTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-token.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\n\nexport class CreateTokenDto\n{\n\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                A data transfer object that is used for the POST /user route. validates and transforms the body of the post request. The request gets denied if there is any property that is not mentioned.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                fName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                passwd\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    A string which holds the Email of the user, is mandatory.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        fName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:15\n                        \n                    \n\n            \n                \n                    A variable which holds the first name of a person. It is a string, must not be empty, minimum length is 3 characters, and the max length is 96.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    Same as fName\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password has to be atleast 8 characters long, one number and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    A string which holds the password of the user. Mandatory, and the minimum length if 8. The Matches decorator tells that the string must only contain the specified characters in the expression inside the first arguement of the Matches decorator, which is a RegExp.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\n/**\n * A data transfer object that is used for the POST /user route. validates and transforms the body of the post request. The request gets denied if there is any property that is not mentioned.\n */\nexport class CreateUserDto\n{\n    /**\n     * A variable which holds the first name of a person. It is a string, must not be empty, minimum length is 3 characters, and the max length is 96.\n     */\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    fName: string;\n\n    /**\n     * Same as fName\n     */\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lName?: string;\n\n    /**\n     * A string which holds the Email of the user, is mandatory.\n     */\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    /**\n     * A string which holds the password of the user. Mandatory, and the minimum length if 8. The Matches decorator tells that the string must only contain the specified characters in the expression inside the first arguement of the Matches decorator, which is a RegExp.\n     */\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password has to be atleast 8 characters long, one number and one special character.'\n    })\n    passwd: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsParamsDto.html":{"url":"classes/GetPostsParamsDto.html","title":"class - GetPostsParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts-params.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\n\nexport class GetPostsParamsDto\n{\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    userId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/get-users-params.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                A Data Transfer Object which is used for the Get user request at the Get /user route. Then it is forwarded to the user.service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID.', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/get-users-params.dto.ts:19\n                        \n                    \n\n            \n                \n                    id is a number which holds the specific ID of the user. It is unique for every user. The type decorator is used to transform the string value present in the Params of the get request, and then passed to the service.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Transform, Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\n/**\n * A Data Transfer Object which is used for the Get user request at the Get /user route. Then it is forwarded to the user.service\n */\nexport class GetUsersParamDto{\n    /**\n     * id is a number which holds the specific ID of the user. It is unique for every user. The type decorator is used to transform the string value present in the Params of the get request, and then passed to the service. \n     */\n    @ApiPropertyOptional({\n        description: \"Get user with a specific ID.\",\n        example: 1234,\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PartialType } from \"@nestjs/swagger\";\nimport { CreatePostDto } from \"./create-post.dto\";\nimport { IsNotEmpty, IsInt } from \"class-validator\";\n\n\nexport class PatchPostDto extends PartialType(CreatePostDto){\n\n    @ApiProperty(\n        {\n            description: \"The ID of the post that needs to be updated\"\n        }\n    )\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                A DTO for patch route, currently empty.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\n\n/**\n * A DTO for patch route, currently empty.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto){\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nUserModule->PostModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from \"./post.controller\";\nimport { PostsService } from \"./providers/post.service\";\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n    imports: [UserModule],\n    controllers: [PostsController],\n    providers: [PostsService]\n}\n)\nexport class PostModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Controller class which handles all the incoming request at the /posts route.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 if your post is created successfully.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        This function is used to create and store new posts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(postsParams: GetPostsParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Returns all the public posts of an user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postsParams\n                                            \n                                                            GetPostsParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'You get a 200 if your post is updated successfully.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/post.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        This function is used to update existing posts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Delete, Put, Patch, Param, Query, Body, Req, Headers, Ip, ParseIntPipe, DefaultValuePipe, ValidationPipe } from \"@nestjs/common\";\nimport { CreatePostDto } from \"./dtos/create-post.dto\";\nimport { PostsService } from \"./providers/post.service\";\nimport { GetPostsParamsDto } from \"./dtos/get-posts-params.dto\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { PatchPostDto } from \"./dtos/patch-post.dto\";\n\n/**\n * Controller class which handles all the incoming request at the /posts route.\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n    /**\n     * \n     * @param postsService \n     */\n    constructor(\n        private readonly postsService: PostsService\n    ) {\n\n    }\n\n    /**\n     * Returns all the public posts of an user.\n     * @param postsParams \n     * @returns \n     */\n    @Get('/:userId?')\n    public getPosts(@Param() postsParams: GetPostsParamsDto) {\n        console.log(typeof postsParams.userId)\n        return this.postsService.findAll(postsParams.userId);\n    }\n\n    /**\n     * This function is used to create and store new posts.\n     * @param createPostDto \n     */\n    @ApiOperation(\n        {\n            summary: \"Creates a new blog post\",\n        }\n    )\n    @ApiResponse(\n        {\n            status: 201,\n            description: \"You get a 201 if your post is created successfully.\"\n        }\n    )\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        console.log(createPostDto)\n    }\n\n    /**\n     * This function is used to update existing posts.\n     * @param patchPostsDto \n     */\n    @ApiOperation(\n        {\n            summary: \"Updates an existing blog post\",\n        }\n    )\n    @ApiResponse(\n        {\n            status: 200,\n            description: \"You get a 200 if your post is updated successfully.\"\n        }\n    )\n    @Patch()\n    public updatePost(@Body() patchPostsDto: PatchPostDto)\n    {\n        \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/post.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/post.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { GetPostsParamsDto } from \"../dtos/get-posts-params.dto\";\nimport { UsersService } from \"src/user/providers/user.service\";\n\n\n@Injectable()\nexport class PostsService {\n    constructor(\n        private readonly usersService: UsersService\n    ) {\n\n    }\n\n    public findAll = (userId: number): Array => {\n\n        const user = this.usersService.findOneById(userId);\n        console.log(\"user is a type of \" + typeof user);\n        //console.log(userId);\n\n        return [\n            {\n                user: user,\n                title: 'test1',\n                content: '12356',\n            },\n            {\n                user: user,\n                title: 'test1',\n                content: '12356',\n            },\n        ]\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUserModule\n\nUserModule\n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module , forwardRef} from '@nestjs/common';\nimport { UsersController } from './user.controller';\nimport { UsersService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n    imports:[forwardRef(()=> AuthModule)],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                A controller class which handles all the requests coming at the /users route.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto, headers: any, ip: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        This function is used to register a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users in the application.'})@ApiResponse({status: 200, description: ' Users fetched successfully based on the query.'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query.', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The postition of the page number that you want the API to return.', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Returns all the registered user in the app. The parameter limit tells how many users to include in the response. The page parameter tells the offset from 0.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         user[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:95\n                        \n                    \n\n\n            \n                \n                        This function is used to update the information of an existing user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Delete, Put, Patch, Param, Query, Body, Req, Headers, Ip, ParseIntPipe,DefaultValuePipe, ValidationPipe } from \"@nestjs/common\"\nimport { CreateUserDto } from \"./dtos/create-user.dto\";\nimport { GetUsersParamDto } from \"./dtos/get-users-params.dto\";\nimport { PatchUserDto } from \"./dtos/patch-user.dto\";\nimport { UsersService, user } from \"./providers/user.service\";\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n    // type p={\n    //     id: number\n// };\n    \n/**\n * A controller class which handles all the requests coming at the /users route.\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n    /**\n     * \n     * @param usersService \n     */\n    constructor(\n        private readonly usersService: UsersService,\n    \n    ){ }\n\n\n    /**\n     * Returns all the registered user in the app. The parameter limit tells how many users to include in the response. The page parameter tells the offset from 0.\n     * @param getUserParamDto \n     * @param limit \n     * @param page \n     * @returns \n     */\n    @Get('/:id?') //'/:id?/:option?'\n    @ApiOperation({\n            summary: \"Fetches a list of registered users in the application.\"\n    })\n    @ApiResponse(\n        {\n            status: 200,\n            description: \" Users fetched successfully based on the query.\"\n        }\n    )\n    @ApiQuery({\n        name: 'limit',\n        type: 'number',\n        required: false,\n        description: 'The number of entries returned per query.',\n        example: 10\n    })\n           @ApiQuery({\n        name: 'page',\n        type: 'number',\n        required: false,\n        description: 'The postition of the page number that you want the API to return.',\n        example: 1\n    })\n    public getUsers(@Param() getUserParamDto: GetUsersParamDto, //@Param('id', ParseIntPipe) id: number | undefined\n        @Query('limit',new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page',new DefaultValuePipe(1), ParseIntPipe) page : number\n    ): user[]\n    {\n\n        return this.usersService.findAll(getUserParamDto, limit, page);\n    }\n\n    /**\n     * This function is used to register a new user.\n     * @param createUserDto \n     * @param headers \n     * @param ip \n     * @returns \n     */\n    @Post()\n    public createUser(\n        @Body(new ValidationPipe({whitelist: true ,forbidNonWhitelisted:true, transform: true})) createUserDto: CreateUserDto, // we can remove new ValidationPipe from here because we added a global ValidationPipe in main.ts\n        @Headers() headers: any,\n        @Ip() ip: any): string\n    {\n\n        //console.dir(typeof request);\n        // console.log(request)\n        console.log(createUserDto instanceof CreateUserDto);\n        console.log(headers);\n        console.log(ip);\n        return 'sent a POST request to /users endpoint to create an user.';\n    }\n\n    /**\n     * This function is used to update the information of an existing user.\n     * @param patchUserDto \n     * @returns \n     */\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto)\n    {\n        return patchUserDto;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to the users relation in the database and perform operations regarding users of the app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/user/providers/user.service.ts:20\n                            \n                        \n\n                \n                    \n                            A constructor which injects an external circular dependency AuthModule/AuthService as a singleton\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/providers/user.service.ts:39\n                        \n                    \n\n\n            \n                \n                        A function which returns all the users in the DB.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         user[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/providers/user.service.ts:67\n                        \n                    \n\n\n            \n                \n                        A function which takes a number as an arguement and returns an user type if it is found in the DB\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         user\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-params.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\n\n\n/**\n * user type, used by function findOneById and findAll\n * @type\n */\nexport type user = {\n    id?: number,\n    fName: string,\n    email: string\n}\n/**\n * Class to connect to the users relation in the database and perform operations regarding users of the app\n * @class\n */\n@Injectable()\nexport class UsersService {\n\n    /**\n     * A constructor which injects an external circular dependency AuthModule/AuthService as a singleton\n     * @constructor\n     * @param authService \n     */\n    constructor(\n        @Inject(forwardRef(() => AuthService))\n        private readonly authService: AuthService\n    ){}\n\n    /**\n     * A function which returns all the users in the DB.\n     * @param getUserParamDto \n     * @param limit \n     * @param page \n     * @returns\n     */\n    public findAll(\n        getUserParamDto: GetUsersParamDto,\n        limit: number,\n        page: number,\n    ): user[] {\n\n        //using auth\n\n        const isAuth = this.authService.isAuth();\n        console.log(isAuth)\n\n        return [\n            {\n                fName: \"John\",\n                email: 'john@doe.com',\n            },\n            {\n                fName: \"Jane\",\n                email: 'jane@doe.com',\n            },\n        ]\n    }\n\n    /**\n     * A function which takes a number as an arguement and returns an user type if it is found in the DB\n     * @param id \n     * @returns \n     */\n    public findOneById(id: number): user {\n        return {\n            id: 1234,\n            fName: \"Jane\",\n            email: 'jane@doe.com',\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-token.dto.ts\n            \n            class\n            CreateTokenDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts-params.dto.ts\n            \n            class\n            GetPostsParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/posts/providers/post.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/dtos/get-users-params.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/providers/user.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/user/providers/user.service.ts\n            \n            type alias\n            user\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../status.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                    \n                        \n                            enum which tells the current state of a post.\n\n                        \n                    \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                    \n                        \n                            Enum which stores/tells the type of post\n\n                        \n                    \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        This function initializes the NestJS app, can be named anything other than bootstrap.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nLearning NestJS\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPostModule -->\n\nUserModule->PostModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            user   (src/.../user.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/providers/user.service.ts\n    \n    \n        \n            \n                \n                    \n                    user\n                \n            \n            \n                \n                    user type, used by function findOneById and findAll\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
